// ================================================================================================
//  workshop
//  Copyright (C) 2021 Tim Leonard
// ================================================================================================
#pragma once

#include "workshop.core/utils/init_list.h"

namespace ws {

class renderer;
class render_effect;
class render_world_state;
class render_view;
class ri_command_list;

// ================================================================================================
//  Base class for all render passes.
// 
//  A render pass represents one or more draw calls that all run using the same pipeline state
//  and parameters. 
// ================================================================================================
class render_pass
{
public:

    // Command lists and associated state generated by this command 
    // list for execution this frame.
    struct generated_state
    {
        std::vector<ri_command_list*> graphics_command_lists;
    };

public:

    // Debugging name for this pass, will show up in profiles.
    std::string name;

public:

    // Creates or destroys any rendering resources which will be needed
    // by this render pass.
    virtual result<void> create_resources(renderer& renderer) { return true; };
    virtual result<void> destroy_resources(renderer& renderer) { return true; };

    // Generates any command lists or other state required to execute this pass.
    // This is run in parallel with all other passes, so care must be taken
    // with what it accesses.
    virtual void generate(renderer& renderer, generated_state& output, render_view& view) = 0;

};

}; // namespace ws
