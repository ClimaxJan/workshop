# ================================================================================================
#  workshop
#  Copyright (C) 2022 Tim Leonard
# ================================================================================================
type: shader
version: 1

imports: [ data:shaders/common/camera.yaml ]

# Keys with set of accepted values which are set at runtime.
# These are used to select the appropriate technique to render
# and effect with. If a technique doesn't specify a particular
# variation value then its assumed it accepts all.
variations:
  draw_mode: [ Opaque, Wireframe ]
  tile_size: [ 8, 16 ]  

# InCode:
#   new RenderPass("Geometry Rendering", EffectKey("Geometry"))

# Describes the uniform blocks passed into the shader.
param_blocks:
  geometry_state:
    scope: instance
    fields:
      # Converts to define with indexing into bindless space?
      texture_albedo: texture2d
      # Converts to define with indexing into bindless space?
      texture_sampler: sampler

# Describes the pipeline state at the point a render call is made.
render_states:
  wireframe:
    draw_mode: wireframe
    blend_mode: overwrite
    depth_write_enabled: true
  opaque:
    draw_mode: polygon
    blend_mode: overwrite
    depth_write_enabled: false

# Defines the layout of input vertex data.
vertex_layouts:
  unskinned_geometry:
    position: float3
    color: float4

# The effect is what a render pass actually specifies, it selects an appropriate
# technique based on variation settings. 
effects:
  geometry:
    techniques:
      geometry_opaque:
        draw_mode: [ Opaque ]
      geometry_wireframe:
        draw_mode: [ Wireframe ]

# These techniques bind together the shader and the pipeline state
# to be used when rendering individual draw calls.
techniques:

  geometry_opaque:
    vertex_shader: 
      file: data:shaders/source/geometry.hlsl
      entry: Vertex
    pixel_shader: 
      file: data:shaders/source/geometry.hlsl
      entry: Pixel
    render_state: opaque
    vertex_layout: unskinned_geometry
    param_blocks: [ camera_state, geometry_state ]
    defines:
      DRAW_MODE_OPAQUE: 1

  geometry_wireframe:
    vertex_shader: 
      file: data:shaders/source/geometry.hlsl
      entry: Vertex
    pixel_shader: 
      file: data:shaders/source/geometry.hlsl
      entry: Pixel
    render_state: wireframe
    vertex_layout: unskinned_geometry
    param_blocks: [ camera_state, geometry_state ]
    defines: 
      DRAW_MODE_WIREFRAME: 1


# compile each technique individually
# generate a pso for each technique
# effect is just use to select appropriate technique based on various keys


# Auto generate code
# get_vertex(SV_VertexID) returns struct containing vertex input data defined by vertex_layout, bindless. 
# texture_albedo defined as a lookup into bindless texture array.

